apiVersion: apps/v1
kind: Deployment
metadata:
  name: traefik
  namespace: admin
  labels: 
    app: traefik
    network: admin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traefik
  template:
    metadata:
      labels:
        app: traefik
        network: admin
    spec:
      serviceAccountName: traefik-ingress-controller
      containers: 
        - name: traefik
          image: traefik:v2.3
          args:
            - --api.insecure
            - --accesslog
            - --entrypoints.web.Address=:80
            - --entrypoints.websecure.Address=:443
            - --certificatesresolvers.myresolver.acme.tlschallenge
            - --certificatesresolvers.myresolver.acme.email=${EMAIL}
            - --certificatesresolvers.myresolver.acme.storage=acme.json
            - --entrypoints.web.http.redirections.entryPoint.to=websecure
            - --entrypoints.web.http.redirections.entryPoint.scheme=https
            - --providers.kubernetescrd
            - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
          ports:
            - name: web
              containerPort: 80
            - name: websecure
              containerPort: 443

---

## ADMIN WEB SERVER STACK
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: admin-web-server
  namespace: admin
  labels:
    traefik: enabled
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`admin.${DOMAIN_NAME}`) && (Path(`/{p:.+\..+}`) || Path(`/`))
      kind: Rule
      services:
      - name: admin-web-server
        namespace: admin
        port: 80
  tls:
    certResolver: myresolver

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-web-server
  namespace: admin
  labels:
    type: admin-web-server
spec:
  template:
    metadata:
      namespace: admin
      labels:
        type: admin-web-server
    spec:
      containers:
        - name: admin-web-server
          image: ilyaskussainov/admin-webserver:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 80
  selector:
    matchLabels:
      type: admin-web-server
  replicas: 1


---

apiVersion: v1
kind: Service
metadata:
  name: admin-web-server
  namespace: admin
  labels:
    type: admin-web-server
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
  selector:
    type: admin-web-server

---


## ADMIN APP SERVER STACK
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: admin-app-server
  namespace: admin
  labels:
    traefik: enabled
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`admin.${DOMAIN_NAME}.com`)
      kind: Rule
      services:
      - name: admin-app-server
        namespace: admin
        port: 3000
  tls:
    certResolver: myresolver

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-app-server
  namespace: admin
  labels:
    type: admin-app-server
    network: admin
spec:
  template:
    metadata:
      namespace: admin
      labels:
        type: admin-app-server
        network: admin
    spec:
      serviceAccountName: admin-app
      containers:
        - name: admin-app-server
          image: ilyaskussainov/admin-app:latest
          imagePullPolicy: Always
          livenessProbe: 
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
          ports:
            - containerPort: 3000
          env:
            - name: SESSION_SECRET
              value: verysecretstring
            - name: REDIS_PORT
              value: '6379'
            - name: REDIS_HOST
              value: "admin-session"
            - name: DB_PASSWORD
              value: password
            - name: DB_USER
              value: postgres
            - name: DB_NAME
              value: postgres
            - name: DB_HOST
              value: "admin-database"
            - name: DOMAIN_NAME
              value: "${DOMAIN_NAME}"
  selector:
    matchLabels:
      type: admin-app-server
  replicas: 1

---

apiVersion: v1
kind: Service
metadata:
  name: admin-app-server
  namespace: admin
  labels:
    type: admin-app-server
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
  selector:
    type: admin-app-server

---

### ADMIN DATABASE STACK

apiVersion: v1
kind: PersistentVolumeClaim
metadata: 
  name: admin-pvc
  namespace: admin
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: do-block-storage

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-database
  namespace: admin
  labels:
    type: admin-database
spec:
  template:
    metadata:
      namespace: admin
      labels:
        type: admin-database
    spec:
      containers:
        - name: admin-database
          image: postgres
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command: ["psql", "-U", "postgres", "-d", "postgres", "-h", "127.0.0.1"]
            initialDelaySeconds: 10
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              value: password
          volumeMounts:
            - mountPath: "/var/lib/postgresql/data"
              name: admin-db-volume
              subPath: postgres
      volumes:
        - name: admin-db-volume
          persistentVolumeClaim:
            claimName: admin-pvc
  selector:
    matchLabels:
      type: admin-database
  replicas: 1

--- 

apiVersion: v1
kind: Service
metadata:
  name: admin-database
  namespace: admin
  labels:
    type: admin-database
spec:
  type: ClusterIP
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    type: admin-database

---

apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: admin
  name: admin-app

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: admin-permission
subjects:
- kind: ServiceAccount
  name: admin-app
  namespace: admin
roleRef:
  kind: ClusterRole 
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-session
  namespace: admin
  labels:
    type: admin-session
spec:
  template:
    metadata:
      namespace: admin
      labels:
        type: admin-session
    spec:
      containers:
        - name: admin-session
          image: redis:6.2-rc1-alpine3.12
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 6379
  selector:
    matchLabels:
      type: admin-session
  replicas: 1

---

apiVersion: v1
kind: Service
metadata:
  name: admin-session
  namespace: admin
  labels:
    type: admin-session
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
  selector:
    type: admin-session

--- 

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: traefik-policy
  namespace: admin
spec:
  podSelector: 
    matchLabels:
      app: traefik
  policyTypes:
  - Ingress
  - Egress
  ingress: 
  - {}
  egress:
  - {}

--- 

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: db-policy
  namespace: admin
spec:
  podSelector: 
    matchLabels:
      type: admin-database
  policyTypes:
  - Ingress
  - Egress
  ingress: 
  - from:
    - podSelector: 
        matchLabels:
          type: admin-app-server
  egress:
  - {}   

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: web-policy
  namespace: admin
spec:
  podSelector: 
    matchLabels:
      type: admin-web-server
  policyTypes:
  - Ingress
  - Egress
  ingress: 
  - from:
    - podSelector: 
        matchLabels:
          app: traefik
  egress:
  - {}   

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: session-policy
  namespace: admin
spec:
  podSelector: 
    matchLabels:
      type: admin-session
  policyTypes:
  - Ingress
  - Egress
  ingress: 
  - from:
    - podSelector: 
        matchLabels:
          type: admin-app-server
  egress:
  - {}   

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: app-policy
  namespace: admin
spec:
  podSelector: 
    matchLabels:
      type: admin-app-server
  policyTypes:
  - Ingress
  - Egress
  ingress: 
  - from:
    - namespaceSelector:
        matchLabels:
          type: satellite
      podSelector:
        matchLabels:
          type: satellite-app-server
    - podSelector: 
        matchLabels:
          type: admin-session
    - podSelector: 
        matchLabels:
          type: admin-database
    - podSelector:
        matchLabels:
          app: traefik
  egress:
  - {}   